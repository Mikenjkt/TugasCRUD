/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.epikent.libdb;

/**
 *
 * @author user
 * note: auah pusing, maven ngebug
 */

import java.sql.*;
import javax.swing.table.DefaultTableModel;

public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    
    String url = "jdbc:sqlserver://DESKTOP-JF5DEGR\\SQLEXPRESS:1433;databaseName=simple;user=sa;password=Thecode@;encrypt=false;";
    int selectedY;
    
    public Main() {
        initComponents();
        setLocationRelativeTo(null);  
        
        Connection conn = null;       
        try {                        
            conn = DriverManager.getConnection(url);
            
            System.out.println("Berhasil Connect cuy!");
            ResultSet resultSet = conn.createStatement().executeQuery("SELECT * FROM sample");           
                                
            for (int i = 0; resultSet.next(); i++) {
                ((DefaultTableModel) dataBase.getModel()).setRowCount(i+1);
                dataBase.setValueAt(resultSet.getString("ID"), i, 0);
                dataBase.setValueAt(resultSet.getString("Name"), i, 1);
                dataBase.setValueAt(resultSet.getString("value"), i, 2);                          
            }            
        } catch (SQLException ex) {
            System.out.println("SQL Error: " + ex.getMessage());
        } finally {            
            try {                
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                System.out.println("Error closing the connection: " + e.getMessage());
            }
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        dataBase = new javax.swing.JTable();
        Name = new javax.swing.JTextField();
        Value = new javax.swing.JTextField();
        Insert = new javax.swing.JButton();
        Search = new javax.swing.JTextField();
        Find = new javax.swing.JButton();
        History = new javax.swing.JLabel();
        Delete = new javax.swing.JButton();
        ID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fChange = new javax.swing.JTextField();
        Change = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        dataBase.getTableHeader().setReorderingAllowed(false);
        dataBase.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nama", "Stok"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        dataBase.setFillsViewportHeight(true);
        dataBase.setRowHeight(20);
        dataBase.setShowGrid(true);
        dataBase.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                focus(evt);
            }
        });
        jScrollPane1.setViewportView(dataBase);

        Insert.setText("Tambah");
        Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insert(evt);
            }
        });

        Find.setText("Cari");
        Find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                search(evt);
            }
        });

        History.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        History.setText("> N/A");

        Delete.setText("Delete");
        Delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete(evt);
            }
        });

        jLabel2.setText("Jumlah: ");

        jLabel3.setText("ID:");

        jLabel4.setText("Nama Buku");

        jLabel5.setFont(new java.awt.Font("Franklin Gothic Demi", 1, 24)); // NOI18N
        jLabel5.setText("Database Perpustakaan");

        Change.setText("Ubah");
        Change.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Change(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Sans", 0, 12)); // NOI18N
        jLabel1.setText("gak finished");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fChange)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Change)
                        .addGap(18, 18, 18)
                        .addComponent(Delete))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Search)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Find, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(History)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(jLabel5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(2, 2, 2)
                                    .addComponent(Value, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(6, 6, 6)
                                    .addComponent(ID, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(83, 83, 83)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Insert)))
                .addContainerGap(139, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Name, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Value, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ID, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(Insert, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Find)
                    .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Delete)
                    .addComponent(fChange, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Change))
                .addGap(39, 39, 39)
                .addComponent(History)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void search(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_search
        // TODO add your handling code here:
        Connection conn = null;       
        String keyword = Search.getText().toLowerCase();
        
        try {                        
            conn = DriverManager.getConnection(url);
            
            ResultSet resultSet = conn.createStatement().executeQuery("SELECT * FROM sample"); 
            int i = 0;
            while (resultSet.next()) {
                if (resultSet.getString("Name").toLowerCase().contains(keyword)){
                    ((DefaultTableModel) dataBase.getModel()).setRowCount(i+1);               
                    dataBase.setValueAt(resultSet.getInt("ID"), i, 0);                
                    dataBase.setValueAt(resultSet.getString("Name"), i, 1);
                    dataBase.setValueAt(resultSet.getInt("value"), i, 2);
                    i++;
                }                                      
            }
            
        } catch (SQLException ex) {
            System.out.println("SQL Error: " + ex.getMessage());
        } finally {            
            try {                
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                System.out.println("Error closing the connection: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_search

    private void insert(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insert
        // TODO add your handling code here:   
        Connection conn = null;
        PreparedStatement stmt = null;
        try {               
            conn = DriverManager.getConnection(url);  
            
            String qry = "INSERT INTO sample (ID ,Name, Value) VALUES (?, ?, ?)";                    
            stmt = conn.prepareStatement(qry);
            stmt.setInt(1, Integer.parseInt(ID.getText()));
            stmt.setString(2, Name.getText());
            stmt.setInt(3, Integer.parseInt(Value.getText()));
            stmt.executeUpdate();            
            
            ResultSet resultSet = conn.createStatement().executeQuery("SELECT * FROM sample");
            for (int i = 0; resultSet.next(); i++) {
                ((DefaultTableModel) dataBase.getModel()).setRowCount(i+1);
                dataBase.setValueAt(resultSet.getString("ID"), i, 0);
                dataBase.setValueAt(resultSet.getString("Name"), i, 1);
                dataBase.setValueAt(resultSet.getString("value"), i, 2);                          
            }
            
            History.setText("> Menambah buku '"
                    +Name.getText()+"', berjumlah "
                    +Value.getText()+" buah, dengan ID:"
                    +ID.getText()
            );
            
            Name.setText(null);
            Value.setText(null);
            ID.setText(null);
            
        } catch (SQLException e) {
            System.out.println("SQL Error: " + e.getMessage());
        } finally {           
            try {
                if (stmt != null) {
                    conn.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                System.out.println("Error closing the connection: " + e.getMessage());
            }
        }        
    }//GEN-LAST:event_insert

    private void delete(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete
        // TODO add your handling code here:
        int slect = dataBase.getSelectedRow();
        String keyword = dataBase.getValueAt(slect, 0).toString();  
        String word = dataBase.getValueAt(slect, 1).toString();
        int rowCount = dataBase.getRowCount();        
        
        if (slect != -1) {            
            int i;            
            for (i = slect; i+1<rowCount; i++){
                System.out.println(i);
                dataBase.setValueAt(dataBase.getValueAt(i+1, 0), i, 0);
                dataBase.setValueAt(dataBase.getValueAt(i+1, 1), i, 1);
                dataBase.setValueAt(dataBase.getValueAt(i+1, 2), i, 2);
            }            
            ((DefaultTableModel) dataBase.getModel()).setRowCount(i);
        }        
        
        Connection conn = null;
        PreparedStatement stmt = null;
        try {            
            conn = DriverManager.getConnection(url);  
            
            String qry = "DELETE FROM sample WHERE ID= ?";                    
            stmt = conn.prepareStatement(qry);
            stmt.setInt(1, Integer.parseInt(keyword));            
            stmt.executeUpdate();
                        
            History.setText("> Menghapus buku '"
                    +word+"', dengan ID:"
                    +keyword
            );           
            
        } catch (SQLException e) {
            System.out.println("SQL Error: " + e.getMessage());
        } finally {            
            try {
                if (stmt != null) {
                    conn.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                System.out.println("Error closing the connection: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_delete

    private void focus(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_focus
        // TODO add your handling code here:
        selectedY = dataBase.getSelectedRow();                
        fChange.setText(dataBase.getValueAt(selectedY, 2).toString());
    }//GEN-LAST:event_focus

    private void Change(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Change
        // TODO add your handling code here:
        int val = Integer.parseInt(fChange.getText());
        dataBase.setValueAt(val, selectedY, 2);        
    }//GEN-LAST:event_Change
      
    private void uChnage(){ //error gtw knp
        Connection conn = null;
        PreparedStatement stmt = null;
        int slect = dataBase.getSelectedRow();
        
        try {            
            conn = DriverManager.getConnection(url);  
            
            String qry = "UPDATE sample SET Name = ?, Value = ? WHERE ID = ?";                    
            stmt = conn.prepareStatement(qry);
            stmt.setString(1, dataBase.getValueAt(slect, 1).toString()); 
            stmt.setString(2, dataBase.getValueAt(slect, 2).toString()); 
            stmt.setString(3, dataBase.getValueAt(slect, 0).toString()); 
            stmt.executeUpdate();
            
        } catch (SQLException e) {
            System.out.println("SQL Error: " + e.getMessage());
        } finally {            
            try {
                if (stmt != null) {
                    conn.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                System.out.println("Error closing the connection: " + e.getMessage());
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });         
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Change;
    private javax.swing.JButton Delete;
    private javax.swing.JButton Find;
    private javax.swing.JLabel History;
    private javax.swing.JTextField ID;
    private javax.swing.JButton Insert;
    private javax.swing.JTextField Name;
    private javax.swing.JTextField Search;
    private javax.swing.JTextField Value;
    private javax.swing.JTable dataBase;
    private javax.swing.JTextField fChange;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
